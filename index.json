{"project": "networkx", "project_url": "https://networkx.org/", "show_commit_url": "http://github.com/networkx/networkx/commit/", "hash_length": 8, "revision_to_hash": {"21": "403cc382f28ecf1deb720e17be47ac09aabc007b", "39": "712b96d07ecd069b525cb2b2ed54eec052e12f19", "80": "596d53366db5cd572a3f6b2c91be247cc4da8116", "102": "a48afc41b9af691900f95221ac381efeebadff00", "124": "71a49383d5cae628bf8454ff94b376e215568077", "164": "6a338a2483873d43b90a67c5c17af14325d843d7", "194": "6dd48244fa28bf11e5eac60d709daeb9038bba1b", "266": "36e373a42258cb8bb8593a6717a37cffa964927a", "287": "6532f6664e6d2a61a408db039df7171c42ab320a", "344": "4cecb041b5b126da9c3156a1bb45dde6118011ba", "401": "ebc987dd70122800e3126e780a3ee53b8c897a33", "469": "5343aeec09dffd7ceaa52367ffbe35e521893dec", "517": "ecb603fd94319529ba1dcd9bff09521c2788531b", "546": "e86f8c81ab394579172e32b402dcb27e50a4cf05", "578": "e60f2222974c18f70f68dc045263048d4e5669df", "703": "5a579545792363c0a1fc7b7785e72c98bd7c52b9", "902": "1ca6e5aa872c1b95f362b7ee656eab4e681ded92", "1002": "a1cf434a8233935c4fe31468ab198df272c1e605", "1006": "50295c6cd0b9b6c440e8b94782a6022296944864", "1207": "596b72ae4096e5fe2e877febeb6677e4b632b5cc", "1260": "e8b4ab263fca6e4e4c0ec057210f7a72df26da1e", "1359": "370f1ef9d30bfc72f4d01444fae60fea123f1370", "1554": "b83841c91a010eb131e62b99c77ec35422c0a529", "1559": "1c7dc32d73b348a038c014842be2301f15f9e1d7", "1720": "f164eacd8f07413375287f9cca987819590a2b9b", "1737": "736105480bfbf653d40ac02bf28c1a3833aa8c4e", "1988": "e22a29c1f1e940b37b4ffd05aa57cb1864957ec1", "2016": "51c2b0db96f72d5229161f1528465fac775fdfb4", "2203": "31090e268af7a886074c0d2f8686da2ceaf1dd12", "2222": "1ec213801795bd3fa3e2e1a78ad174620fef97de", "2563": "eba0d369c6ac8bbff199fc96954a2c8734b6e13f", "2578": "7407bda23da3cb86cfb02dc3b1038bc7e5254e48", "2586": "fc8e6d25a4e19bce1dc5736cd76c2873ad8898b9", "3407": "34cc4652fc1563d11810dbfc29c4b52768f4441b", "3433": "cf6ce260f7b2025fc048d076b88e98bb4ca2beee", "3534": "a24418de13812ac12e9d6377311c98fb67a77036", "3554": "8ac796aba866ade1a56b83e30f25ed392ca3512c", "4147": "716863367f8528ecba09a5d0af004f5813def66b", "4237": "9b60352af32be887a1d806ec2b70031930b2a29c", "4505": "4d364bfcee7b24f3df137e8dcd36f7a547892e55", "4585": "0a05943c25125ced71f708c0564b0cef5ae8d89c", "4696": "c0dd9a121f19fea313a9bec3c5a389adda4da084", "4737": "0b6f608d46601fb180a0f42eaa8a9a2ca9a42ecf", "5449": "0627af0710e747e6394d14562730ab57b5f041e6", "5462": "724fa025269ed48bedbdbdae85f419b74ac85b69", "5484": "f5d178ea8bc221c00802051580dcbf7d9573c248", "5491": "4655568c4959121ed75a15c6e1e388ab67111b8c", "5571": "c719912f6920428ba6edf7bf9cc4a72742f27d1c", "5580": "f9b1086f2a9530d45e608a5f0d884e2f4f96694e", "5723": "2b9c90c970d5e58b6ea8a355c1a8cdc3bfb6052c", "5731": "626f18ea85ba047189d7ef1af72347dfede02f9f", "5822": "fd6b5fbc690147cd3e565136bec5fd2c55721db7", "5835": "5d191a5de977dd04f18840e57001988409c22161", "5838": "f28d7c3b7f4f540581ac31e1d993700417bfbb51", "5845": "807d9fde187e18a58d542f87ab0d0cb98ef46459", "6047": "dc1f2e9a6feb868dd92c72055fd21cbfd4e3c38c", "6062": "61f1374200adbf9b436649a3b02698d04cebfadc", "6065": "fd0ecd22723cb30a365511d324841a85caad589c", "6357": "2dce2c0da3173b5d93193e5f29ae2c0a630902d8", "6365": "12f852f6a686ed32f718125c5965586dd6bb82a9", "6729": "36383ccc94a2e2d50893e13bb2a3ec96e5f6518f", "6804": "3bfe402e908dfc5003dd433696da9f51fd54bbe9", "6836": "33abdebcbf4080bbee302e1a7aa5a1eaad7481fe", "6857": "13678196a7fba5eef749b23925f67f0cc02701f3", "6860": "5d57c095466c742c216f4143ac66abe01367728e", "6865": "9900703ae1d061141ceb312b8344a282c2c8bda6", "6906": "f4b528e230c6faadd5a2d426b39c29a0a165c38c", "7412": "db2b316853a2195a08fdffb0c727b5b05681ad82", "7426": "0fb36f317e6f652496f538bb308864768be2c729", "7435": "46abc65354d44d4065e42c846cb613c7a21215b0", "7438": "8594a68e3e9ee3a373fe626b0ab1176023acb17f", "7524": "b7a9e181a717c047d5fa61e9044843f3ef2b3a33", "7548": "3bf243a47eb6487cea30d6978d4f09d102ce97fb", "7635": "3468b9aa90a0ee9e9e6cd08d038cf2cd8e287ebe", "7652": "1a1050424410b0f47809b9872aed6e02e51097ca", "7658": "b0c1457a31a2902331ccbaa3a5075270ba6141b6", "7667": "0d88d6f1de7cfb9a41042f5ca95cd510f20dfc88", "7707": "1ae220f76cd5067ef76ef05a9d5da22f649cc423"}, "revision_to_date": {"21": 1121628470000, "39": 1124632291000, "80": 1133817228000, "102": 1136572327000, "124": 1139172134000, "164": 1142255042000, "194": 1146269385000, "266": 1151121781000, "287": 1153445474000, "344": 1159541954000, "401": 1164730319000, "469": 1176428894000, "517": 1185210266000, "546": 1200248212000, "578": 1218988258000, "703": 1227032303000, "902": 1250386452000, "1002": 1262891413000, "1006": 1263241138000, "1207": 1271904202000, "1260": 1280667966000, "1359": 1282353271000, "1554": 1295233832000, "1559": 1295822435000, "1720": 1305994296000, "1737": 1307202182000, "1988": 1321393066000, "2016": 1321970646000, "2203": 1339539376000, "2222": 1341445635000, "2563": 1374525872000, "2578": 1375052111000, "2586": 1375624593000, "3407": 1402087520000, "3433": 1403368640000, "3534": 1404206324000, "3554": 1410653335000, "4147": 1434003976000, "4237": 1435426400000, "4505": 1446241295000, "4585": 1451140074000, "4696": 1452959097000, "4737": 1454174744000, "5449": 1503080050000, "5462": 1503884012000, "5484": 1505172085000, "5491": 1505928171000, "5571": 1516131055000, "5580": 1516606104000, "5723": 1536625363000, "5731": 1537381834000, "5822": 1553995527000, "5835": 1554413622000, "5838": 1554419025000, "5845": 1555015954000, "6047": 1570932527000, "6062": 1571241784000, "6065": 1571277836000, "6357": 1597592089000, "6365": 1598126488000, "6729": 1617487652000, "6804": 1622492770000, "6836": 1624429831000, "6857": 1625763215000, "6860": 1625774978000, "6865": 1627351916000, "6906": 1631225109000, "7412": 1645312965000, "7426": 1646086748000, "7435": 1646396500000, "7438": 1646491074000, "7524": 1649133717000, "7548": 1649543641000, "7635": 1652456938000, "7652": 1652793042000, "7658": 1652895691000, "7667": 1653146859000, "7707": 1654359097000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Core(TM) i5-8210Y CPU @ 1.60GHz"], "machine": ["local.mac"], "num_cpu": ["4"], "os": ["Darwin 21.3.0"], "ram": ["8589934592"], "python": ["3.10", "3.8", "3.9"], "numpy": [""], "pandas": [""], "scipy": [""], "matplotlib": [""], "branch": ["main"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Core(TM) i5-8210Y CPU @ 1.60GHz", "machine": "local.mac", "num_cpu": "4", "os": "Darwin 21.3.0", "ram": "8589934592", "python": "3.10", "numpy": "", "pandas": "", "scipy": "", "matplotlib": "", "branch": "main"}, {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i5-8210Y CPU @ 1.60GHz", "machine": "local.mac", "num_cpu": "4", "os": "Darwin 21.3.0", "ram": "8589934592", "python": "3.9", "numpy": "", "pandas": "", "scipy": "", "matplotlib": "", "branch": "main"}, {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i5-8210Y CPU @ 1.60GHz", "machine": "local.mac", "num_cpu": "4", "os": "Darwin 21.3.0", "ram": "8589934592", "python": "3.8", "numpy": "", "pandas": "", "scipy": "", "matplotlib": "", "branch": "main"}], "benchmarks": {"benchmark_algorithms.AlgorithmBenchmarks.time_average_clustering": {"code": "class AlgorithmBenchmarks:\n    def time_average_clustering(self, graph_type):\n        _ = nx.average_clustering(graph_type)", "min_run_count": 2, "name": "benchmark_algorithms.AlgorithmBenchmarks.time_average_clustering", "number": 0, "param_names": ["graph_type"], "params": [["<networkx.classes.graph.Graph object> (0)", "<networkx.classes.graph.Graph object> (1)", "<networkx.classes.graph.Graph object> (2)", "<networkx.classes.graph.Graph object> (3)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 120, "type": "time", "unit": "seconds", "version": "23f403058aad8c22356d2e5146e233ba6dca5d722212f7c5edc0e4aa497c15ca", "warmup_time": -1}, "benchmark_algorithms.AlgorithmBenchmarks.time_betweenness_centrality": {"code": "class AlgorithmBenchmarks:\n    def time_betweenness_centrality(self, graph_type):\n        # timing this should also give us information about underlying shortest path\n        # methods\n        _ = nx.betweenness_centrality(graph_type)", "min_run_count": 2, "name": "benchmark_algorithms.AlgorithmBenchmarks.time_betweenness_centrality", "number": 0, "param_names": ["graph_type"], "params": [["<networkx.classes.graph.Graph object> (0)", "<networkx.classes.graph.Graph object> (1)", "<networkx.classes.graph.Graph object> (2)", "<networkx.classes.graph.Graph object> (3)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 120, "type": "time", "unit": "seconds", "version": "44cb885e78376b786d7c9d8ab17e7a992a67300b0d5bfab164c46877ef892e34", "warmup_time": -1}, "benchmark_algorithms.AlgorithmBenchmarks.time_connected_components": {"code": "class AlgorithmBenchmarks:\n    def time_connected_components(self, graph_type):\n        _ = list(nx.connected_components(graph_type))", "min_run_count": 2, "name": "benchmark_algorithms.AlgorithmBenchmarks.time_connected_components", "number": 0, "param_names": ["graph_type"], "params": [["<networkx.classes.graph.Graph object> (0)", "<networkx.classes.graph.Graph object> (1)", "<networkx.classes.graph.Graph object> (2)", "<networkx.classes.graph.Graph object> (3)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 120, "type": "time", "unit": "seconds", "version": "9cc853335ff28d1e354dbff444b597b96c4c7a85ed117236445a53cbf1150bea", "warmup_time": -1}, "benchmark_algorithms.AlgorithmBenchmarks.time_greedy_modularity_communities": {"code": "class AlgorithmBenchmarks:\n    def time_greedy_modularity_communities(self, graph_type):\n        _ = community.greedy_modularity_communities(graph_type)", "min_run_count": 2, "name": "benchmark_algorithms.AlgorithmBenchmarks.time_greedy_modularity_communities", "number": 0, "param_names": ["graph_type"], "params": [["<networkx.classes.graph.Graph object> (0)", "<networkx.classes.graph.Graph object> (1)", "<networkx.classes.graph.Graph object> (2)", "<networkx.classes.graph.Graph object> (3)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 120, "type": "time", "unit": "seconds", "version": "5f45ed84e48888645ca318086460d76aa5caa5be5a412aa5f068a33032b611d1", "warmup_time": -1}, "benchmark_algorithms.AlgorithmBenchmarks.time_k_core": {"code": "class AlgorithmBenchmarks:\n    def time_k_core(self, graph_type):\n        _ = nx.k_core(graph_type)", "min_run_count": 2, "name": "benchmark_algorithms.AlgorithmBenchmarks.time_k_core", "number": 0, "param_names": ["graph_type"], "params": [["<networkx.classes.graph.Graph object> (0)", "<networkx.classes.graph.Graph object> (1)", "<networkx.classes.graph.Graph object> (2)", "<networkx.classes.graph.Graph object> (3)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 120, "type": "time", "unit": "seconds", "version": "bbf7a92560cc824b6e27a8878be99128eda4e01ea007866af60474c91501cf53", "warmup_time": -1}, "benchmark_algorithms.AlgorithmBenchmarks.time_louvain_communities": {"code": "class AlgorithmBenchmarks:\n    def time_louvain_communities(self, graph_type):\n        _ = community.louvain_communities(graph_type)", "min_run_count": 2, "name": "benchmark_algorithms.AlgorithmBenchmarks.time_louvain_communities", "number": 0, "param_names": ["graph_type"], "params": [["<networkx.classes.graph.Graph object> (0)", "<networkx.classes.graph.Graph object> (1)", "<networkx.classes.graph.Graph object> (2)", "<networkx.classes.graph.Graph object> (3)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 120, "type": "time", "unit": "seconds", "version": "ecb9b84d9f5f9cb212b71444e6fefadb62254838093502affcde0f8eb560a09b", "warmup_time": -1}, "benchmark_algorithms.AlgorithmBenchmarks.time_pagerank": {"code": "class AlgorithmBenchmarks:\n    def time_pagerank(self, graph_type):\n        _ = nx.pagerank(graph_type)", "min_run_count": 2, "name": "benchmark_algorithms.AlgorithmBenchmarks.time_pagerank", "number": 0, "param_names": ["graph_type"], "params": [["<networkx.classes.graph.Graph object> (0)", "<networkx.classes.graph.Graph object> (1)", "<networkx.classes.graph.Graph object> (2)", "<networkx.classes.graph.Graph object> (3)"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 120, "type": "time", "unit": "seconds", "version": "f5ad8e80e00225e2de3e36e088f1e88aa665768ce8c66789de405900f952a372", "warmup_time": -1}, "benchmarks_classes.GraphBenchmark.time_add_edges_from": {"code": "class GraphBenchmark:\n    def time_add_edges_from(self, graph_type):\n        self.G.add_edges_from(self.edges)\n\n    def setup(self, graph_type):\n        self.nodes = list(range(1, 1000))\n        self.edges = list()\n        self.subgraph_nodes = list(range(1, 100))\n        self.subgraph_nodes_large = list(range(1, 900))\n        self.G = graph_type()", "min_run_count": 2, "name": "benchmarks_classes.GraphBenchmark.time_add_edges_from", "number": 0, "param_names": ["graph_type"], "params": [["<class 'networkx.classes.graph.Graph'>", "<class 'networkx.classes.digraph.DiGraph'>", "<class 'networkx.classes.multigraph.MultiGraph'>", "<class 'networkx.classes.multidigraph.MultiDiGraph'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1778055b8d6057d67a9ee689b8038afd256a274d8ae5275a89f4c2e9fb055acf", "warmup_time": -1}, "benchmarks_classes.GraphBenchmark.time_add_nodes_from": {"code": "class GraphBenchmark:\n    def time_add_nodes_from(self, graph_type):\n        self.G.add_nodes_from(self.nodes)\n\n    def setup(self, graph_type):\n        self.nodes = list(range(1, 1000))\n        self.edges = list()\n        self.subgraph_nodes = list(range(1, 100))\n        self.subgraph_nodes_large = list(range(1, 900))\n        self.G = graph_type()", "min_run_count": 2, "name": "benchmarks_classes.GraphBenchmark.time_add_nodes_from", "number": 0, "param_names": ["graph_type"], "params": [["<class 'networkx.classes.graph.Graph'>", "<class 'networkx.classes.digraph.DiGraph'>", "<class 'networkx.classes.multigraph.MultiGraph'>", "<class 'networkx.classes.multidigraph.MultiDiGraph'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "83f88e881c24002c40574c330c6adf823d66ce1b0345f2188452f8938544f2d6", "warmup_time": -1}, "benchmarks_classes.GraphBenchmark.time_copy": {"code": "class GraphBenchmark:\n    def time_copy(self, graph_type):\n        _ = self.G.copy()\n\n    def setup(self, graph_type):\n        self.nodes = list(range(1, 1000))\n        self.edges = list()\n        self.subgraph_nodes = list(range(1, 100))\n        self.subgraph_nodes_large = list(range(1, 900))\n        self.G = graph_type()", "min_run_count": 2, "name": "benchmarks_classes.GraphBenchmark.time_copy", "number": 0, "param_names": ["graph_type"], "params": [["<class 'networkx.classes.graph.Graph'>", "<class 'networkx.classes.digraph.DiGraph'>", "<class 'networkx.classes.multigraph.MultiGraph'>", "<class 'networkx.classes.multidigraph.MultiDiGraph'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "89000b7abf4dd34bea728799672e4de4549be637c5aee78c2a21c03128323f1e", "warmup_time": -1}, "benchmarks_classes.GraphBenchmark.time_graph_create": {"code": "class GraphBenchmark:\n    def time_graph_create(self, graph_type):\n        _ = nx.Graph()\n\n    def setup(self, graph_type):\n        self.nodes = list(range(1, 1000))\n        self.edges = list()\n        self.subgraph_nodes = list(range(1, 100))\n        self.subgraph_nodes_large = list(range(1, 900))\n        self.G = graph_type()", "min_run_count": 2, "name": "benchmarks_classes.GraphBenchmark.time_graph_create", "number": 0, "param_names": ["graph_type"], "params": [["<class 'networkx.classes.graph.Graph'>", "<class 'networkx.classes.digraph.DiGraph'>", "<class 'networkx.classes.multigraph.MultiGraph'>", "<class 'networkx.classes.multidigraph.MultiDiGraph'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "80b0d725454c5db28051337b7bea757f8a1f214a483f2dd1dca3880d84b35f70", "warmup_time": -1}, "benchmarks_classes.GraphBenchmark.time_remove_edges_from": {"code": "class GraphBenchmark:\n    def time_remove_edges_from(self, graph_type):\n        self.G.remove_edges_from(self.edges)\n\n    def setup(self, graph_type):\n        self.nodes = list(range(1, 1000))\n        self.edges = list()\n        self.subgraph_nodes = list(range(1, 100))\n        self.subgraph_nodes_large = list(range(1, 900))\n        self.G = graph_type()", "min_run_count": 2, "name": "benchmarks_classes.GraphBenchmark.time_remove_edges_from", "number": 0, "param_names": ["graph_type"], "params": [["<class 'networkx.classes.graph.Graph'>", "<class 'networkx.classes.digraph.DiGraph'>", "<class 'networkx.classes.multigraph.MultiGraph'>", "<class 'networkx.classes.multidigraph.MultiDiGraph'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "cbbf305a077f7a8e570364650900731480f3fad3176ce15ed4251666bf005c13", "warmup_time": -1}, "benchmarks_classes.GraphBenchmark.time_remove_nodes_from": {"code": "class GraphBenchmark:\n    def time_remove_nodes_from(self, graph_type):\n        self.G.remove_nodes_from(self.nodes)\n\n    def setup(self, graph_type):\n        self.nodes = list(range(1, 1000))\n        self.edges = list()\n        self.subgraph_nodes = list(range(1, 100))\n        self.subgraph_nodes_large = list(range(1, 900))\n        self.G = graph_type()", "min_run_count": 2, "name": "benchmarks_classes.GraphBenchmark.time_remove_nodes_from", "number": 0, "param_names": ["graph_type"], "params": [["<class 'networkx.classes.graph.Graph'>", "<class 'networkx.classes.digraph.DiGraph'>", "<class 'networkx.classes.multigraph.MultiGraph'>", "<class 'networkx.classes.multidigraph.MultiDiGraph'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "81ff6f0950e47d2dd8c3a79006a5027108bd3eb2a8c3c09b3580f2da06b6c37f", "warmup_time": -1}, "benchmarks_classes.GraphBenchmark.time_subgraph": {"code": "class GraphBenchmark:\n    def time_subgraph(self, graph_type):\n        _ = self.G.subgraph(self.subgraph_nodes).copy()\n\n    def setup(self, graph_type):\n        self.nodes = list(range(1, 1000))\n        self.edges = list()\n        self.subgraph_nodes = list(range(1, 100))\n        self.subgraph_nodes_large = list(range(1, 900))\n        self.G = graph_type()", "min_run_count": 2, "name": "benchmarks_classes.GraphBenchmark.time_subgraph", "number": 0, "param_names": ["graph_type"], "params": [["<class 'networkx.classes.graph.Graph'>", "<class 'networkx.classes.digraph.DiGraph'>", "<class 'networkx.classes.multigraph.MultiGraph'>", "<class 'networkx.classes.multidigraph.MultiDiGraph'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "fb14879bd859f9758acabc253e55de964419a1063bb5391c1fe373d8acd187aa", "warmup_time": -1}, "benchmarks_classes.GraphBenchmark.time_subgraph_large": {"code": "class GraphBenchmark:\n    def time_subgraph_large(self, graph_type):\n        _ = self.G.subgraph(self.subgraph_nodes_large).copy()\n\n    def setup(self, graph_type):\n        self.nodes = list(range(1, 1000))\n        self.edges = list()\n        self.subgraph_nodes = list(range(1, 100))\n        self.subgraph_nodes_large = list(range(1, 900))\n        self.G = graph_type()", "min_run_count": 2, "name": "benchmarks_classes.GraphBenchmark.time_subgraph_large", "number": 0, "param_names": ["graph_type"], "params": [["<class 'networkx.classes.graph.Graph'>", "<class 'networkx.classes.digraph.DiGraph'>", "<class 'networkx.classes.multigraph.MultiGraph'>", "<class 'networkx.classes.multidigraph.MultiDiGraph'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "071eb6adb84020e5009e528577a44794b4967d1472e06c5cb8ec4b5c50e4acfb", "warmup_time": -1}, "benchmarks_classes.GraphBenchmark.time_to_directed": {"code": "class GraphBenchmark:\n    def time_to_directed(self, graph_type):\n        _ = self.G.to_directed()\n\n    def setup(self, graph_type):\n        self.nodes = list(range(1, 1000))\n        self.edges = list()\n        self.subgraph_nodes = list(range(1, 100))\n        self.subgraph_nodes_large = list(range(1, 900))\n        self.G = graph_type()", "min_run_count": 2, "name": "benchmarks_classes.GraphBenchmark.time_to_directed", "number": 0, "param_names": ["graph_type"], "params": [["<class 'networkx.classes.graph.Graph'>", "<class 'networkx.classes.digraph.DiGraph'>", "<class 'networkx.classes.multigraph.MultiGraph'>", "<class 'networkx.classes.multidigraph.MultiDiGraph'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "cfc5ac7c6a9f28268e5fb6cb96bd8a4db93bb1326fd6a02090252b9721a1361f", "warmup_time": -1}, "benchmarks_classes.GraphBenchmark.time_to_undirected": {"code": "class GraphBenchmark:\n    def time_to_undirected(self, graph_type):\n        _ = self.G.to_undirected()\n\n    def setup(self, graph_type):\n        self.nodes = list(range(1, 1000))\n        self.edges = list()\n        self.subgraph_nodes = list(range(1, 100))\n        self.subgraph_nodes_large = list(range(1, 900))\n        self.G = graph_type()", "min_run_count": 2, "name": "benchmarks_classes.GraphBenchmark.time_to_undirected", "number": 0, "param_names": ["graph_type"], "params": [["<class 'networkx.classes.graph.Graph'>", "<class 'networkx.classes.digraph.DiGraph'>", "<class 'networkx.classes.multigraph.MultiGraph'>", "<class 'networkx.classes.multidigraph.MultiDiGraph'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "52a5e0bd09f5396c7892c0c026591e5ff1d51e60ef5d0890e275a48e9013d881", "warmup_time": -1}}, "machines": {"local.mac": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i5-8210Y CPU @ 1.60GHz", "machine": "local.mac", "num_cpu": "4", "os": "Darwin 21.3.0", "ram": "8589934592", "version": 1}}, "tags": {"help": 4737, "networkx-0.23": 21, "networkx-0.24": 39, "networkx-0.25": 80, "networkx-0.26": 102, "networkx-0.27": 124, "networkx-0.28": 164, "networkx-0.29": 194, "networkx-0.30": 266, "networkx-0.31": 287, "networkx-0.32": 344, "networkx-0.33": 401, "networkx-0.34": 469, "networkx-0.35": 517, "networkx-0.36": 546, "networkx-0.37": 578, "networkx-0.99": 703, "networkx-1.0": 1002, "networkx-1.0.1": 1006, "networkx-1.0rc1": 902, "networkx-1.1": 1207, "networkx-1.10": 4505, "networkx-1.10rc1": 4147, "networkx-1.10rc2": 4237, "networkx-1.11": 4737, "networkx-1.11rc1": 4585, "networkx-1.11rc2": 4696, "networkx-1.2": 1260, "networkx-1.3": 1359, "networkx-1.4": 1559, "networkx-1.4rc1": 1554, "networkx-1.5": 1737, "networkx-1.5rc1": 1720, "networkx-1.6": 2016, "networkx-1.6rc1": 1988, "networkx-1.7": 2222, "networkx-1.7rc1": 2203, "networkx-1.8": 2578, "networkx-1.8.1": 2586, "networkx-1.8rc1": 2563, "networkx-1.9": 3433, "networkx-1.9.1": 3554, "networkx-1.9.1rc1": 3534, "networkx-1.9rc1": 3407, "networkx-2.0": 5491, "networkx-2.0b1": 5449, "networkx-2.0b2": 5462, "networkx-2.0rc1": 5484, "networkx-2.1": 5580, "networkx-2.1rc1": 5571, "networkx-2.2": 5731, "networkx-2.2rc1": 5723, "networkx-2.3": 5845, "networkx-2.3rc1": 5822, "networkx-2.3rc2": 5835, "networkx-2.3rc3": 5838, "networkx-2.4": 6065, "networkx-2.4rc1": 6047, "networkx-2.4rc2": 6062, "networkx-2.5": 6365, "networkx-2.5.1": 6729, "networkx-2.5rc1": 6357, "networkx-2.6": 6857, "networkx-2.6.1": 6860, "networkx-2.6.2": 6865, "networkx-2.6.3": 6906, "networkx-2.6rc1": 6804, "networkx-2.6rc2": 6836, "networkx-2.7": 7426, "networkx-2.7.1": 7438, "networkx-2.7rc1": 7412, "networkx-2.8": 7548, "networkx-2.8.1": 7658, "networkx-2.8.1rc1": 7635, "networkx-2.8.2": 7667, "networkx-2.8.3": 7707, "networkx-2.8rc1": 7524}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}